# data file for the Fltk User Interface Designer (fluid)
version 1.0108 
header_name {.h} 
code_name {.cxx}
comment {//
// DyneTK, the Dyne Toolkit
// Copyright (C) 2007 Matthias Melcher
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
} {in_source in_header
} 

decl {\#include "allNewt.h"} {public
} 

decl {\#include "dtk/Dtk_Project.h"} {public
} 

decl {\#include "dtk/Dtk_Template.h"} {public
} 

decl {\#include "dtk/Dtk_Platform.h"} {public
} 

decl {\#include "main.h"} {public
} 

widget_class Fldtk_New_Slot_Dialog {
  label {New Slot} open
  xywh {408 275 400 220} type Double
  class Fl_Window modal visible
} {
  Fl_Box wTemplateProto {
    xywh {5 8 390 22} labelfont 1 labelsize 12
  }
  Fl_Menu_Button wSpecific {
    label Specific
    callback {wSlotName->value(wSpecific->menu()[wSpecific->value()].label());
wSlotName->do_callback();} open
    xywh {65 40 84 20} labelsize 12 textsize 12
  } {}
  Fl_Menu_Button wMethods {
    label Methods
    callback {wSlotName->value(wMethods->menu()[wMethods->value()].label());
wSlotName->do_callback();} open
    xywh {158 40 84 20} labelsize 12 textsize 12
  } {}
  Fl_Menu_Button wAttributes {
    label Attributes
    callback {wSlotName->value(wAttributes->menu()[wAttributes->value()].label());
wSlotName->do_callback();} open
    xywh {250 40 84 20} labelsize 12 textsize 12
  } {}
  Fl_Input wSlotName {
    label {Slot Name:}
    callback {if (*wSlotName->value()) {
  wAdd->activate();
} else {
  wAdd->deactivate();
}
const char *help = dtkPlatform->getHelp(tmpl_, wSlotName->value());
wHelp->copy_label(help);}
    xywh {75 81 155 19} labelsize 12 when 1 textsize 12
  }
  Fl_Choice wEditor {
    label {Editor:} open
    xywh {280 80 105 20} down_box BORDER_BOX labelsize 12 textsize 12
  } {
    MenuItem {} {
      label Evaluate
      user_data {"EVAL"} user_data_type {char*}
      xywh {0 0 30 20} labelsize 12
    }
    MenuItem {} {
      label Script
      user_data {"SCPT"} user_data_type {char*}
      xywh {10 10 30 20} labelsize 12
    }
    MenuItem {} {
      label Text
      user_data {"TEXT"} user_data_type {char*}
      xywh {20 20 30 20} labelsize 12
    }
    MenuItem {} {
      label Number
      user_data {"NUMB"} user_data_type {char*}
      callback {// FIXME: or INTG ?}
      xywh {30 30 30 20} labelsize 12
    }
    MenuItem {} {
      label Boolean
      user_data {"BOOL"} user_data_type {char*}
      xywh {40 40 30 20} labelsize 12
    }
    MenuItem {} {
      label Rectangle
      user_data {"RECT"} user_data_type {char*}
      xywh {50 50 30 20} labelsize 12
    }
    MenuItem {} {
      label Picture
      user_data {"PICT"} user_data_type {char*}
      xywh {60 60 30 20} labelsize 12
    }
  }
  Fl_Box wHelp {
    xywh {15 116 370 54} box BORDER_BOX labelsize 12 align 213
  }
  Fl_Button wAdd {
    label Add
    callback {tmpl_->addSlot(wSlotName->value(), (char*)wEditor->menu()[wEditor->value()].user_data());}
    xywh {240 185 64 20} labelsize 12
  }
  Fl_Button wDone {
    label Done
    callback {hide();}
    xywh {320 185 64 20} labelsize 12
  }
  Function {setTemplate(Dtk_Template *tmpl)} {open return_type void
  } {
    code {tmpl_ = tmpl;

wTemplateProto->copy_label(tmpl->id());
Fl_Menu_Item *m;

m = dtkPlatform->specificChoiceMenu(tmpl);
dtkPlatform->updateActivation(m, tmpl);
wSpecific->menu(m);

m = dtkPlatform->methodsChoiceMenu();
dtkPlatform->updateActivation(m, tmpl);
wMethods->menu(m);

m = dtkPlatform->attributesChoiceMenu();
dtkPlatform->updateActivation(m, tmpl);
wAttributes->menu(m);

wSlotName->value("");
wEditor->value(0);
wHelp->label("");
wAdd->deactivate();} {}
  }
  decl {Dtk_Template *tmpl_;} {}
} 

widget_class Fldtk_Declare_To_Dialog {
  label {Template Info} open
  xywh {422 99 300 122} type Double
  class Fl_Window modal visible
} {
  Fl_Input wName {
    label {Name:}
    callback {if (*wName->value()) {
  wParent->activate();
} else {
  wParent->deactivate();
}}
    xywh {75 16 205 19} labelsize 12 when 1 textsize 12
  }
  Fl_Choice wParent {
    label {Declare To:} open
    xywh {75 45 205 20} down_box BORDER_BOX labelsize 12 textsize 12
  } {
    MenuItem {} {
      label {<don't declare>}
      xywh {0 0 30 20} labelsize 12
    }
    MenuItem {} {
      label {<parent>}
      xywh {0 0 30 20} labelsize 12
    }
  }
  Fl_Button wCancel {
    label Cancel
    callback {hide();}
    xywh {135 85 64 20} labelsize 12
  }
  Fl_Button wOK {
    label OK
    callback {const char *name = wName->value();
tmpl_->setName(name);
if (name && *name) {
  tmpl_->declareTo(wParent->value());
} else {
  tmpl_->declareTo(0);
}
hide();}
    xywh {215 85 64 20} labelsize 12
  }
  Function {setTemplate(Dtk_Template *tmpl)} {open return_type void
  } {
    code {tmpl_ = tmpl;
wName->value(tmpl->getName());
wParent->value(tmpl->getDeclareTo());
Dtk_Template *p = tmpl->parent();
if (p) {
  const char *pName = p->getName();
  if (pName && *pName) {
    menu_wParent[1].label(pName);
  } else {
    menu_wParent[1].label("<parent>");
  }
} else {
  menu_wParent[1].label(0);
}} {selected
    }
  }
  decl {Dtk_Template *tmpl_;} {}
} 

comment {
//
// DyneTK, the Dyne Toolkit
// Copyright (C) 2007 Matthias Melcher
//} {in_source in_header
} 
