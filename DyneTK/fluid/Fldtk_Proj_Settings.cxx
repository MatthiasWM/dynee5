//
// DyneTK, the Dyne Toolkit
// Copyright (C) 2007 Matthias Melcher
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//

// generated by Fast Light User Interface Designer (fluid) version 1.0108

#include "Fldtk_Proj_Settings.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

void set_changed_cb(Fl_Widget*w, void*) {
  Fldtk_Proj_Settings *dlg = (Fldtk_Proj_Settings*)(w->window());
dlg->set_changed();
}
Fldtk_Proj_App::Fldtk_Proj_App(int X, int Y, int W, int H, const char *L)
  : Fl_Group(0, 0, W, H, L) {
this->labelsize(12);
{ name = new Flmm_Set_Input(65, 31, 135, 18, "Name:");
  name->box(FL_DOWN_BOX);
  name->color(FL_BACKGROUND2_COLOR);
  name->selection_color(FL_SELECTION_COLOR);
  name->labeltype(FL_NORMAL_LABEL);
  name->labelfont(0);
  name->labelsize(12);
  name->labelcolor(FL_FOREGROUND_COLOR);
  name->textsize(12);
  name->callback((Fl_Callback*)set_changed_cb);
  name->align(FL_ALIGN_LEFT);
  name->when(FL_WHEN_CHANGED);
} // Flmm_Set_Input* name
{ symbol = new Flmm_Set_Input(65, 62, 135, 18, "Symbol:");
  symbol->box(FL_DOWN_BOX);
  symbol->color(FL_BACKGROUND2_COLOR);
  symbol->selection_color(FL_SELECTION_COLOR);
  symbol->labeltype(FL_NORMAL_LABEL);
  symbol->labelfont(0);
  symbol->labelsize(12);
  symbol->labelcolor(FL_FOREGROUND_COLOR);
  symbol->textsize(12);
  symbol->callback((Fl_Callback*)set_changed_cb);
  symbol->align(FL_ALIGN_LEFT);
  symbol->when(FL_WHEN_CHANGED);
} // Flmm_Set_Input* symbol
{ auto_close = new Flmm_Set_Check_Button(210, 60, 80, 20, "&Auto Close");
  auto_close->box(FL_NO_BOX);
  auto_close->down_box(FL_DOWN_BOX);
  auto_close->color(FL_BACKGROUND_COLOR);
  auto_close->selection_color(FL_FOREGROUND_COLOR);
  auto_close->labeltype(FL_NORMAL_LABEL);
  auto_close->labelfont(0);
  auto_close->labelsize(12);
  auto_close->labelcolor(FL_FOREGROUND_COLOR);
  auto_close->callback((Fl_Callback*)set_changed_cb);
  auto_close->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
  auto_close->when(FL_WHEN_RELEASE);
} // Flmm_Set_Check_Button* auto_close
position(X, Y);
end();
}

void Fldtk_Proj_App::updateData() {
  name->update_data();
symbol->update_data();
auto_close->update_data();
}

void Fldtk_Proj_App::updateDialog() {
  name->update_widget();
symbol->update_widget();
auto_close->update_widget();
}
Fldtk_Proj_Icon::Fldtk_Proj_Icon(int X, int Y, int W, int H, const char *L)
  : Fl_Group(0, 0, W, H, L) {
this->labelsize(12);
{ Fl_Group* o = new Fl_Group(5, 25, 50, 195);
  o->deactivate();
  { Fl_Button* o = new Fl_Button(5, 25, 50, 20, "Browse");
    o->labelsize(12);
    o->deactivate();
  } // Fl_Button* o
  { Fl_Box* o = new Fl_Box(5, 55, 50, 50, "Default");
    o->box(FL_BORDER_BOX);
    o->color(FL_LIGHT3);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Box* o
  { Fl_Button* o = new Fl_Button(5, 200, 50, 20, "Browse");
    o->labelsize(12);
    o->deactivate();
  } // Fl_Button* o
  { Fl_Box* o = new Fl_Box(5, 140, 50, 50, "None");
    o->box(FL_BORDER_BOX);
    o->color(FL_LIGHT3);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Box* o
  { Fl_Box* o = new Fl_Box(5, 105, 50, 35, "Black & White");
    o->labelsize(12);
    o->align(FL_ALIGN_WRAP);
    o->deactivate();
  } // Fl_Box* o
  o->end();
} // Fl_Group* o
{ Fl_Group* o = new Fl_Group(60, 25, 50, 195);
  o->deactivate();
  { Fl_Button* o = new Fl_Button(60, 25, 50, 20, "Browse");
    o->labelsize(12);
    o->deactivate();
  } // Fl_Button* o
  { Fl_Box* o = new Fl_Box(60, 55, 50, 50, "None");
    o->box(FL_BORDER_BOX);
    o->color(FL_LIGHT3);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Box* o
  { Fl_Button* o = new Fl_Button(60, 200, 50, 20, "Browse");
    o->labelsize(12);
    o->deactivate();
  } // Fl_Button* o
  { Fl_Box* o = new Fl_Box(60, 140, 50, 50, "None");
    o->box(FL_BORDER_BOX);
    o->color(FL_LIGHT3);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Box* o
  { Fl_Box* o = new Fl_Box(60, 105, 50, 35, "Four Grays");
    o->labelsize(12);
    o->align(FL_ALIGN_WRAP);
    o->deactivate();
  } // Fl_Box* o
  o->end();
} // Fl_Group* o
{ Fl_Group* o = new Fl_Group(115, 25, 50, 195);
  o->deactivate();
  { Fl_Button* o = new Fl_Button(115, 25, 50, 20, "Browse");
    o->labelsize(12);
    o->deactivate();
  } // Fl_Button* o
  { Fl_Box* o = new Fl_Box(115, 55, 50, 50, "None");
    o->box(FL_BORDER_BOX);
    o->color(FL_LIGHT3);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Box* o
  { Fl_Button* o = new Fl_Button(115, 200, 50, 20, "Browse");
    o->labelsize(12);
    o->deactivate();
  } // Fl_Button* o
  { Fl_Box* o = new Fl_Box(115, 140, 50, 50, "None");
    o->box(FL_BORDER_BOX);
    o->color(FL_LIGHT3);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Box* o
  { Fl_Box* o = new Fl_Box(115, 105, 50, 35, "Sixteen Grays");
    o->labelsize(12);
    o->align(FL_ALIGN_WRAP);
    o->deactivate();
  } // Fl_Box* o
  o->end();
} // Fl_Group* o
{ Fl_Group* o = new Fl_Group(170, 25, 50, 195);
  o->deactivate();
  { Fl_Button* o = new Fl_Button(170, 25, 50, 20, "Browse");
    o->labelsize(12);
    o->deactivate();
  } // Fl_Button* o
  { Fl_Box* o = new Fl_Box(170, 55, 50, 50, "None");
    o->box(FL_BORDER_BOX);
    o->color(FL_LIGHT3);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Box* o
  { Fl_Button* o = new Fl_Button(170, 200, 50, 20, "Browse");
    o->labelsize(12);
    o->deactivate();
  } // Fl_Button* o
  { Fl_Box* o = new Fl_Box(170, 140, 50, 50, "None");
    o->box(FL_BORDER_BOX);
    o->color(FL_LIGHT3);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Box* o
  { Fl_Box* o = new Fl_Box(170, 105, 50, 35, "256 Grays");
    o->labelsize(12);
    o->align(FL_ALIGN_WRAP);
    o->deactivate();
  } // Fl_Box* o
  o->end();
} // Fl_Group* o
{ Fl_Group* o = new Fl_Group(225, 25, 50, 195);
  o->deactivate();
  { Fl_Button* o = new Fl_Button(225, 25, 50, 20, "Browse");
    o->labelsize(12);
    o->deactivate();
  } // Fl_Button* o
  { Fl_Box* o = new Fl_Box(225, 55, 50, 50, "None");
    o->box(FL_BORDER_BOX);
    o->color(FL_LIGHT3);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Box* o
  { Fl_Button* o = new Fl_Button(225, 200, 50, 20, "Browse");
    o->labelsize(12);
    o->deactivate();
  } // Fl_Button* o
  { Fl_Box* o = new Fl_Box(225, 140, 50, 50, "None");
    o->box(FL_BORDER_BOX);
    o->color(FL_LIGHT3);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Box* o
  { Fl_Box* o = new Fl_Box(225, 105, 50, 35, "Mask");
    o->labelsize(12);
    o->align(FL_ALIGN_WRAP);
    o->deactivate();
  } // Fl_Box* o
  o->end();
} // Fl_Group* o
{ Fl_Group* o = new Fl_Group(285, 55, 90, 60);
  o->deactivate();
  { Fl_Round_Button* o = new Fl_Round_Button(285, 55, 90, 15, "No Mask");
    o->down_box(FL_ROUND_DOWN_BOX);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Round_Button* o
  { Fl_Round_Button* o = new Fl_Round_Button(285, 70, 90, 15, "Use Picture");
    o->down_box(FL_ROUND_DOWN_BOX);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Round_Button* o
  { Fl_Round_Button* o = new Fl_Round_Button(285, 85, 90, 15, "Use XOR");
    o->down_box(FL_ROUND_DOWN_BOX);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Round_Button* o
  { Fl_Round_Button* o = new Fl_Round_Button(285, 100, 90, 15, "Calc Mask");
    o->down_box(FL_ROUND_DOWN_BOX);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Round_Button* o
  o->end();
} // Fl_Group* o
{ Fl_Group* o = new Fl_Group(285, 140, 90, 60);
  o->deactivate();
  { Fl_Round_Button* o = new Fl_Round_Button(285, 140, 90, 15, "No Mask");
    o->down_box(FL_ROUND_DOWN_BOX);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Round_Button* o
  { Fl_Round_Button* o = new Fl_Round_Button(285, 155, 90, 15, "Use Picture");
    o->down_box(FL_ROUND_DOWN_BOX);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Round_Button* o
  { Fl_Round_Button* o = new Fl_Round_Button(285, 170, 90, 15, "Use XOR");
    o->down_box(FL_ROUND_DOWN_BOX);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Round_Button* o
  { Fl_Round_Button* o = new Fl_Round_Button(285, 185, 90, 15, "Calc Mask");
    o->down_box(FL_ROUND_DOWN_BOX);
    o->labelsize(12);
    o->deactivate();
  } // Fl_Round_Button* o
  o->end();
} // Fl_Group* o
{ Fl_Box* o = new Fl_Box(5, 0, 85, 25, "Normal");
  o->labelsize(12);
  o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
  o->deactivate();
} // Fl_Box* o
{ Fl_Box* o = new Fl_Box(0, 220, 85, 25, "Highlighted");
  o->labelsize(12);
  o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
  o->deactivate();
} // Fl_Box* o
{ Fl_Value_Output* o = new Fl_Value_Output(300, 5, 65, 20, "W:");
  o->box(FL_FLAT_BOX);
  o->labelsize(12);
  o->textsize(12);
  o->deactivate();
} // Fl_Value_Output* o
{ Fl_Value_Output* o = new Fl_Value_Output(300, 25, 65, 20, "H:");
  o->box(FL_FLAT_BOX);
  o->labelsize(12);
  o->textsize(12);
  o->deactivate();
} // Fl_Value_Output* o
position(X, Y);
end();
}

void Fldtk_Proj_Icon::updateData() {
  //setName(wName->value());
}

void Fldtk_Proj_Icon::updateDialog() {
  //wName->value(name_);
}
Fldtk_Proj_Package::Fldtk_Proj_Package(int X, int Y, int W, int H, const char *L)
  : Fl_Group(0, 0, W, H, L) {
this->labelsize(12);
{ name = new Flmm_Set_Input(70, 13, 170, 20, "Name:");
  name->box(FL_DOWN_BOX);
  name->color(FL_BACKGROUND2_COLOR);
  name->selection_color(FL_SELECTION_COLOR);
  name->labeltype(FL_NORMAL_LABEL);
  name->labelfont(0);
  name->labelsize(12);
  name->labelcolor(FL_FOREGROUND_COLOR);
  name->textsize(12);
  name->callback((Fl_Callback*)set_changed_cb);
  name->align(FL_ALIGN_LEFT);
  name->when(FL_WHEN_CHANGED);
} // Flmm_Set_Input* name
{ deleteOnDownload = new Flmm_Set_Check_Button(70, 40, 210, 20, "&Delete Old Package on Download");
  deleteOnDownload->box(FL_NO_BOX);
  deleteOnDownload->down_box(FL_DOWN_BOX);
  deleteOnDownload->color(FL_BACKGROUND_COLOR);
  deleteOnDownload->selection_color(FL_FOREGROUND_COLOR);
  deleteOnDownload->labeltype(FL_NORMAL_LABEL);
  deleteOnDownload->labelfont(0);
  deleteOnDownload->labelsize(12);
  deleteOnDownload->labelcolor(FL_FOREGROUND_COLOR);
  deleteOnDownload->callback((Fl_Callback*)set_changed_cb);
  deleteOnDownload->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
  deleteOnDownload->when(FL_WHEN_RELEASE);
} // Flmm_Set_Check_Button* deleteOnDownload
{ Fl_Check_Button* o = new Fl_Check_Button(70, 65, 110, 20, "C&opy Protected");
  o->down_box(FL_DOWN_BOX);
  o->labelsize(12);
  o->callback((Fl_Callback*)set_changed_cb);
  o->deactivate();
} // Fl_Check_Button* o
{ Fl_Check_Button* o = new Fl_Check_Button(70, 90, 145, 20, "&Auto Remove Package");
  o->down_box(FL_DOWN_BOX);
  o->labelsize(12);
  o->callback((Fl_Callback*)set_changed_cb);
  o->deactivate();
} // Fl_Check_Button* o
{ Fl_Check_Button* o = new Fl_Check_Button(70, 115, 125, 20, "&Use Compression");
  o->down_box(FL_DOWN_BOX);
  o->labelsize(12);
  o->callback((Fl_Callback*)set_changed_cb);
  o->deactivate();
} // Fl_Check_Button* o
{ Fl_Check_Button* o = new Fl_Check_Button(70, 140, 250, 20, "&Faster Compression (Newton OS 2.0 only)");
  o->down_box(FL_DOWN_BOX);
  o->value(1);
  o->labelsize(12);
  o->callback((Fl_Callback*)set_changed_cb);
  o->deactivate();
} // Fl_Check_Button* o
{ copyright = new Flmm_Set_Input(70, 168, 285, 35, "Copyright:");
  copyright->type(4);
  copyright->box(FL_DOWN_BOX);
  copyright->color(FL_BACKGROUND2_COLOR);
  copyright->selection_color(FL_SELECTION_COLOR);
  copyright->labeltype(FL_NORMAL_LABEL);
  copyright->labelfont(0);
  copyright->labelsize(12);
  copyright->labelcolor(FL_FOREGROUND_COLOR);
  copyright->textsize(12);
  copyright->callback((Fl_Callback*)set_changed_cb);
  copyright->align(FL_ALIGN_LEFT);
  copyright->when(FL_WHEN_CHANGED);
} // Flmm_Set_Input* copyright
{ version = new Flmm_Set_Input(70, 212, 75, 20, "Version:");
  version->type(2);
  version->box(FL_DOWN_BOX);
  version->color(FL_BACKGROUND2_COLOR);
  version->selection_color(FL_SELECTION_COLOR);
  version->labeltype(FL_NORMAL_LABEL);
  version->labelfont(0);
  version->labelsize(12);
  version->labelcolor(FL_FOREGROUND_COLOR);
  version->textsize(12);
  version->callback((Fl_Callback*)set_changed_cb);
  version->align(FL_ALIGN_LEFT);
  version->when(FL_WHEN_CHANGED);
} // Flmm_Set_Input* version
position(X, Y);
end();
}

void Fldtk_Proj_Package::updateData() {
  name->update_data();
copyright->update_data();
version->update_data();
deleteOnDownload->update_data();
}

void Fldtk_Proj_Package::updateDialog() {
  name->update_widget();
copyright->update_widget();
version->update_widget();
deleteOnDownload->update_widget();
}

Fl_Menu_Item Fldtk_Proj_Project::menu_Platform[] = {
 {"Msgpad", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Newton20", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Newton21", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fldtk_Proj_Project::Fldtk_Proj_Project(int X, int Y, int W, int H, const char *L)
  : Fl_Group(0, 0, W, H, L) {
this->labelsize(12);
{ Fl_Choice* o = new Fl_Choice(100, 15, 145, 20, "&Platform:");
  o->down_box(FL_BORDER_BOX);
  o->labelsize(12);
  o->textsize(12);
  o->deactivate();
  o->menu(menu_Platform);
} // Fl_Choice* o
{ Fl_Input* o = new Fl_Input(100, 45, 145, 20, "Language:");
  o->labelsize(12);
  o->textsize(12);
  o->deactivate();
  o->value("English");
} // Fl_Input* o
{ Fl_Check_Button* o = new Fl_Check_Button(20, 80, 150, 20, "&Compile for Debugging");
  o->down_box(FL_DOWN_BOX);
  o->value(1);
  o->labelsize(12);
  o->deactivate();
} // Fl_Check_Button* o
{ Fl_Check_Button* o = new Fl_Check_Button(20, 105, 145, 20, "&Ignore Native Keyword");
  o->down_box(FL_DOWN_BOX);
  o->labelsize(12);
  o->deactivate();
} // Fl_Check_Button* o
{ Fl_Check_Button* o = new Fl_Check_Button(20, 130, 175, 20, "Check &Global Function Calls");
  o->down_box(FL_DOWN_BOX);
  o->value(1);
  o->labelsize(12);
  o->deactivate();
} // Fl_Check_Button* o
{ Fl_Check_Button* o = new Fl_Check_Button(20, 155, 110, 20, "&V1.0 Build Rules");
  o->down_box(FL_DOWN_BOX);
  o->labelsize(12);
  o->deactivate();
} // Fl_Check_Button* o
{ Fl_Check_Button* o = new Fl_Check_Button(20, 180, 140, 20, "&Use stepChildren Slot");
  o->down_box(FL_DOWN_BOX);
  o->value(1);
  o->labelsize(12);
  o->deactivate();
} // Fl_Check_Button* o
{ Fl_Check_Button* o = new Fl_Check_Button(20, 205, 135, 20, "&Suppress Byte Code");
  o->down_box(FL_DOWN_BOX);
  o->labelsize(12);
  o->deactivate();
} // Fl_Check_Button* o
{ Fl_Check_Button* o = new Fl_Check_Button(200, 80, 130, 20, "C&ompile for Profiling");
  o->down_box(FL_DOWN_BOX);
  o->labelsize(12);
  o->deactivate();
} // Fl_Check_Button* o
{ Fl_Check_Button* o = new Fl_Check_Button(200, 105, 150, 20, "Profile Native &Functions");
  o->down_box(FL_DOWN_BOX);
  o->labelsize(12);
  o->deactivate();
} // Fl_Check_Button* o
{ Fl_Check_Button* o = new Fl_Check_Button(200, 130, 130, 20, "Newton OS &2.0 Only");
  o->down_box(FL_DOWN_BOX);
  o->labelsize(12);
  o->deactivate();
} // Fl_Check_Button* o
{ Fl_Check_Button* o = new Fl_Check_Button(200, 155, 165, 20, "&Faster Functions (2.0 Only)");
  o->down_box(FL_DOWN_BOX);
  o->value(1);
  o->labelsize(12);
  o->deactivate();
} // Fl_Check_Button* o
{ Fl_Check_Button* o = new Fl_Check_Button(200, 180, 160, 20, "&Tighter Packing (2.0 Only)");
  o->down_box(FL_DOWN_BOX);
  o->value(1);
  o->labelsize(12);
  o->deactivate();
} // Fl_Check_Button* o
position(X, Y);
end();
}
Fldtk_Proj_Output::Fldtk_Proj_Output(int X, int Y, int W, int H, const char *L)
  : Fl_Group(0, 0, W, H, L) {
this->labelsize(12);
{ Fl_Box* o = new Fl_Box(10, 10, 55, 20, "Output:");
  o->labelsize(12);
  o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
  o->deactivate();
} // Fl_Box* o
{ Fl_Round_Button* o = new Fl_Round_Button(25, 30, 80, 20, "&Application");
  o->down_box(FL_ROUND_DOWN_BOX);
  o->value(1);
  o->labelsize(12);
  o->deactivate();
} // Fl_Round_Button* o
{ Fl_Round_Button* o = new Fl_Round_Button(25, 55, 50, 20, "&Book");
  o->down_box(FL_ROUND_DOWN_BOX);
  o->labelsize(12);
  o->deactivate();
} // Fl_Round_Button* o
{ Fl_Round_Button* o = new Fl_Round_Button(25, 80, 70, 20, "Auto &Part");
  o->down_box(FL_ROUND_DOWN_BOX);
  o->labelsize(12);
  o->deactivate();
} // Fl_Round_Button* o
{ Fl_Round_Button* o = new Fl_Round_Button(150, 30, 75, 20, "&Store Part");
  o->down_box(FL_ROUND_DOWN_BOX);
  o->labelsize(12);
  o->deactivate();
} // Fl_Round_Button* o
{ Fl_Round_Button* o = new Fl_Round_Button(150, 55, 80, 20, "Sream &File");
  o->down_box(FL_ROUND_DOWN_BOX);
  o->labelsize(12);
  o->deactivate();
} // Fl_Round_Button* o
{ Fl_Round_Button* o = new Fl_Round_Button(150, 80, 90, 20, "&Custom Part:");
  o->down_box(FL_ROUND_DOWN_BOX);
  o->labelsize(12);
  o->deactivate();
} // Fl_Round_Button* o
{ Fl_Input* o = new Fl_Input(245, 80, 45, 20);
  o->labelsize(12);
  o->textsize(12);
  o->deactivate();
  o->value("UNKN");
} // Fl_Input* o
{ Fl_Box* o = new Fl_Box(10, 110, 55, 20, "Result:");
  o->labelsize(12);
  o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
  o->deactivate();
} // Fl_Box* o
{ Fl_Text_Editor* o = new Fl_Text_Editor(25, 130, 325, 75);
  o->labelsize(12);
  o->textsize(12);
  o->deactivate();
} // Fl_Text_Editor* o
{ Fl_Check_Button* o = new Fl_Check_Button(25, 210, 235, 20, "New-Style Stores (Newton OS 2.0 Only)");
  o->down_box(FL_DOWN_BOX);
  o->labelsize(12);
  o->deactivate();
} // Fl_Check_Button* o
position(X, Y);
end();
}

static void cb_Fldtk_Proj_Settings(Fl_Double_Window* o, void*) {
  Fldtk_Proj_Settings *w = (Fldtk_Proj_Settings*)o;
w->hide();
w->updateDialog();
}

void Fldtk_Proj_Settings::cb_wOK_i(Fl_Button*, void*) {
  updateData();
hide();
updateDialog();
}
void Fldtk_Proj_Settings::cb_wOK(Fl_Button* o, void* v) {
  ((Fldtk_Proj_Settings*)(o->parent()))->cb_wOK_i(o,v);
}

void Fldtk_Proj_Settings::cb_wCancel_i(Fl_Button*, void*) {
  hide();
updateDialog();
}
void Fldtk_Proj_Settings::cb_wCancel(Fl_Button* o, void* v) {
  ((Fldtk_Proj_Settings*)(o->parent()))->cb_wCancel_i(o,v);
}

void Fldtk_Proj_Settings::cb_wApply_i(Fl_Button*, void*) {
  updateData();
updateDialog();
}
void Fldtk_Proj_Settings::cb_wApply(Fl_Button* o, void* v) {
  ((Fldtk_Proj_Settings*)(o->parent()))->cb_wApply_i(o,v);
}
Fldtk_Proj_Settings::Fldtk_Proj_Settings(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _Fldtk_Proj_Settings();
}

Fldtk_Proj_Settings::Fldtk_Proj_Settings(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _Fldtk_Proj_Settings();
}

void Fldtk_Proj_Settings::_Fldtk_Proj_Settings() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->callback((Fl_Callback*)cb_Fldtk_Proj_Settings);
this->align(FL_ALIGN_TOP);
this->when(FL_WHEN_RELEASE);
{ Fl_Tabs* o = new Fl_Tabs(10, 10, 380, 270);
  o->box(FL_UP_BOX);
  { app = new Fldtk_Proj_App(10, 35, 380, 245, "Application");
    app->box(FL_NO_BOX);
    app->color(FL_BACKGROUND_COLOR);
    app->selection_color(FL_BACKGROUND_COLOR);
    app->labeltype(FL_NORMAL_LABEL);
    app->labelfont(0);
    app->labelsize(12);
    app->labelcolor(FL_FOREGROUND_COLOR);
    app->align(FL_ALIGN_TOP);
    app->when(FL_WHEN_RELEASE);
    app->end();
  } // Fldtk_Proj_App* app
  { icon = new Fldtk_Proj_Icon(10, 35, 380, 245, "Icon");
    icon->box(FL_NO_BOX);
    icon->color(FL_BACKGROUND_COLOR);
    icon->selection_color(FL_BACKGROUND_COLOR);
    icon->labeltype(FL_NORMAL_LABEL);
    icon->labelfont(0);
    icon->labelsize(12);
    icon->labelcolor(FL_FOREGROUND_COLOR);
    icon->align(FL_ALIGN_TOP);
    icon->when(FL_WHEN_RELEASE);
    icon->hide();
    icon->end();
  } // Fldtk_Proj_Icon* icon
  { package = new Fldtk_Proj_Package(10, 35, 380, 245, "Package");
    package->box(FL_NO_BOX);
    package->color(FL_BACKGROUND_COLOR);
    package->selection_color(FL_BACKGROUND_COLOR);
    package->labeltype(FL_NORMAL_LABEL);
    package->labelfont(0);
    package->labelsize(12);
    package->labelcolor(FL_FOREGROUND_COLOR);
    package->align(FL_ALIGN_TOP);
    package->when(FL_WHEN_RELEASE);
    package->hide();
    package->end();
  } // Fldtk_Proj_Package* package
  { project = new Fldtk_Proj_Project(10, 35, 380, 245, "Project");
    project->box(FL_NO_BOX);
    project->color(FL_BACKGROUND_COLOR);
    project->selection_color(FL_BACKGROUND_COLOR);
    project->labeltype(FL_NORMAL_LABEL);
    project->labelfont(0);
    project->labelsize(12);
    project->labelcolor(FL_FOREGROUND_COLOR);
    project->align(FL_ALIGN_TOP);
    project->when(FL_WHEN_RELEASE);
    project->hide();
    project->end();
  } // Fldtk_Proj_Project* project
  { output = new Fldtk_Proj_Output(10, 35, 380, 245, "Output");
    output->box(FL_NO_BOX);
    output->color(FL_BACKGROUND_COLOR);
    output->selection_color(FL_BACKGROUND_COLOR);
    output->labeltype(FL_NORMAL_LABEL);
    output->labelfont(0);
    output->labelsize(12);
    output->labelcolor(FL_FOREGROUND_COLOR);
    output->align(FL_ALIGN_TOP);
    output->when(FL_WHEN_RELEASE);
    output->hide();
    output->end();
  } // Fldtk_Proj_Output* output
  o->end();
} // Fl_Tabs* o
{ wOK = new Fl_Button(55, 295, 80, 25, "OK");
  wOK->labelsize(12);
  wOK->callback((Fl_Callback*)cb_wOK);
} // Fl_Button* wOK
{ wCancel = new Fl_Button(140, 295, 80, 25, "Cancel");
  wCancel->labelsize(12);
  wCancel->callback((Fl_Callback*)cb_wCancel);
} // Fl_Button* wCancel
{ wApply = new Fl_Button(225, 295, 80, 25, "&Apply");
  wApply->labelsize(12);
  wApply->callback((Fl_Callback*)cb_wApply);
} // Fl_Button* wApply
{ Fl_Button* o = new Fl_Button(310, 295, 80, 25, "&Help");
  o->labelsize(12);
  o->deactivate();
} // Fl_Button* o
this->label("Dyne Toolkit Project Settings");
set_non_modal();
end();
}

Fldtk_Proj_Settings::Fldtk_Proj_Settings(): Fl_Double_Window(400, 335) {
  _Fldtk_Proj_Settings();
}

void Fldtk_Proj_Settings::updateData() {
  app->updateData();
icon->updateData();
package->updateData();
}

void Fldtk_Proj_Settings::updateDialog() {
  app->updateDialog();
icon->updateDialog();
package->updateDialog();
wOK->deactivate();
wApply->deactivate();
}

void Fldtk_Proj_Settings::set_changed() {
  wOK->activate();
wApply->activate();
}

//
// DyneTK, the Dyne Toolkit
// Copyright (C) 2007 Matthias Melcher
//
