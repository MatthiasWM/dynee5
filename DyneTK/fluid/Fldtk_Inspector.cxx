//
// DyneTK, The Dyne Toolkit
// Copyright (C) 2007 Matthias Melcher
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//

// generated by Fast Light User Interface Designer (fluid) version 1.0108

#include "Fldtk_Inspector.h"

void Fldtk_Inspector::cb_wConnect_i(Fl_Button*, void*) {
  InspectorConnect();
}
void Fldtk_Inspector::cb_wConnect(Fl_Button* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()))->cb_wConnect_i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_toolbox_closed[] = {
"18 17 4 1",
" \tc none",
".\tc #000000",
"+\tc #FF0000",
"@\tc #A7A6AA",
"                  ",
"                  ",
"                  ",
"                  ",
"       ....       ",
"      ..  ..      ",
"   ............   ",
"  .++++++++++++.  ",
" .++++++++++++++. ",
" ................ ",
" .++++@@@@@@++++. ",
" .+++@@++++@@+++. ",
" .++++++++++++++. ",
" .++++++++++++++. ",
" ................ ",
"                  ",
"                  "
};
static Fl_Pixmap image_toolbox_closed(idata_toolbox_closed);

static const char *idata_toolbox_inactive[] = {
"18 17 4 1",
" \tc none",
".\tc #777777",
"+\tc #999999",
"@\tc #bbbbbb",
"                  ",
"                  ",
"                  ",
"                  ",
"       ....       ",
"      ..  ..      ",
"   ............   ",
"  .++++++++++++.  ",
" .++++++++++++++. ",
" ................ ",
" .++++@@@@@@++++. ",
" .+++@@++++@@+++. ",
" .++++++++++++++. ",
" .++++++++++++++. ",
" ................ ",
"                  ",
"                  "
};
static Fl_Pixmap image_toolbox_inactive(idata_toolbox_inactive);

void Fldtk_Inspector::cb__i(Fl_Button*, void*) {
  InspectorStopOnThrows();
}
void Fldtk_Inspector::cb_(Fl_Button* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()))->cb__i(o,v);
}

#include <FL/Fl_Image.H>
static unsigned char idata_stop[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,234,157,153,75,235,163,158,210,236,165,160,240,235,162,157,233,235,
160,155,233,234,158,152,240,233,151,146,210,230,139,134,83,229,136,131,6,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,152,148,74,240,177,169,228,252,
211,194,255,255,214,193,255,255,209,189,255,255,207,187,255,255,206,185,255,252,
200,183,255,237,159,152,255,226,126,121,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,232,150,147,73,238,173,166,223,252,212,196,255,255,194,163,255,255,175,
139,255,255,171,137,255,255,167,132,255,255,160,126,255,255,174,145,255,251,195,
180,255,234,147,140,219,224,113,109,74,0,0,0,0,0,0,0,0,0,0,0,0,232,151,146,74,
239,172,165,228,252,209,193,255,255,191,160,255,255,170,134,255,255,167,133,255,
255,162,129,255,255,157,124,255,255,152,120,255,255,144,111,255,255,161,133,255,
251,186,172,255,232,139,131,228,223,105,99,74,0,0,0,0,0,0,0,0,234,154,149,212,
252,205,188,255,255,187,156,255,255,165,129,255,255,162,129,255,255,158,124,255,
255,153,120,255,255,147,116,255,255,142,111,255,255,137,105,255,255,128,96,255,
255,147,120,255,251,173,158,255,224,108,101,212,0,0,0,0,0,0,0,0,233,152,146,242,
255,205,184,255,255,160,125,255,255,157,124,255,255,153,120,255,255,147,115,255,
255,142,110,255,255,137,105,255,255,131,101,255,255,126,96,255,255,120,89,255,
255,112,79,255,255,170,152,255,224,106,99,242,0,0,0,0,0,0,0,0,231,145,139,234,
255,196,177,255,255,152,118,255,255,147,115,255,255,142,110,255,255,137,105,255,
255,131,101,255,255,126,95,255,255,121,90,255,255,115,85,255,255,110,79,255,255,
103,72,255,255,161,144,255,222,98,90,234,0,0,0,0,0,0,0,0,230,138,133,233,255,
190,171,255,255,141,109,255,255,137,105,255,255,131,101,255,255,126,95,255,255,
121,90,255,255,116,85,255,255,111,80,255,255,105,75,255,255,99,70,255,255,92,63,
255,255,155,138,255,220,91,83,233,0,0,0,0,0,0,0,0,229,132,125,242,255,187,166,
255,255,127,95,255,255,126,95,255,255,121,90,255,255,115,85,255,255,110,80,255,
255,105,75,255,255,100,70,255,255,94,65,255,255,89,59,255,255,79,49,255,255,153,
135,255,219,85,77,242,0,0,0,0,0,0,0,0,227,120,113,213,252,178,162,255,255,143,
115,255,255,112,79,255,255,110,79,255,255,105,75,255,255,100,70,255,255,94,65,
255,255,90,60,255,255,85,55,255,255,75,44,255,255,103,78,255,250,147,132,255,
216,72,64,213,0,0,0,0,0,0,0,0,222,101,94,75,231,129,121,229,251,173,159,255,255,
129,103,255,255,94,64,255,255,94,64,255,255,89,60,255,255,85,55,255,255,80,51,
255,253,70,40,255,253,101,74,255,246,150,137,255,222,94,84,229,212,52,44,75,0,0,
0,0,0,0,0,0,0,0,0,0,218,86,78,77,228,117,108,223,250,165,150,255,255,116,90,
255,255,80,50,255,255,79,48,255,254,73,44,255,250,66,37,255,249,96,72,255,244,
148,134,255,221,89,81,220,209,46,37,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
215,72,65,76,228,108,99,228,250,151,137,255,255,149,132,255,252,144,127,255,250,
142,125,255,247,141,125,255,242,139,125,255,221,89,81,255,209,42,34,115,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,65,57,76,217,75,68,210,
218,79,71,240,217,75,67,233,215,72,64,233,216,71,62,240,213,62,53,210,210,46,37,
84,210,43,35,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0};
static Fl_RGB_Image image_stop(idata_stop, 16, 16, 4, 0);

void Fldtk_Inspector::cb_1_i(Fl_Button*, void*) {
  InspectorTraceOff();
}
void Fldtk_Inspector::cb_1(Fl_Button* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()))->cb_1_i(o,v);
}

static unsigned char idata_pencil[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,186,47,9,219,170,
79,234,202,147,80,253,200,144,78,255,210,157,47,223,222,164,53,25,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,217,168,
80,255,216,165,106,255,247,225,201,255,248,227,203,255,202,149,66,255,194,130,
49,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
228,186,47,255,244,212,167,255,248,225,197,255,249,227,204,255,249,227,204,255,
247,219,189,255,201,144,79,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,228,186,47,255,248,237,195,255,248,226,168,255,221,174,108,
255,244,207,165,255,244,207,165,255,247,219,189,255,203,147,83,247,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,186,47,255,248,237,195,255,
252,244,179,255,245,217,104,255,243,207,111,255,208,157,89,255,221,171,115,255,
201,145,79,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,186,
47,255,248,237,195,255,252,244,179,255,245,220,96,255,244,214,68,255,250,238,
142,255,230,180,93,255,217,143,59,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,228,186,47,255,248,237,195,255,252,244,179,255,245,220,96,255,
244,214,68,255,250,238,142,255,230,180,93,255,217,143,59,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,144,39,255,248,237,195,255,252,244,
179,255,245,220,96,255,244,214,68,255,250,238,142,255,230,180,93,255,217,143,59,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,185,137,38,255,242,
230,190,255,252,244,179,255,245,220,96,255,244,214,68,255,250,238,142,255,230,
180,93,255,217,143,59,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,
99,32,32,185,137,38,255,225,203,176,255,200,169,103,255,245,220,96,255,244,214,
68,255,250,238,142,255,230,180,93,255,217,143,59,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,109,30,255,242,225,200,255,250,231,209,255,
181,125,52,255,195,153,49,255,220,196,109,255,207,156,74,255,199,131,52,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,109,30,255,
249,227,203,255,236,170,97,255,232,152,64,255,194,103,21,255,170,96,22,255,180,
118,44,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,89,66,18,255,212,156,93,255,245,207,166,255,236,207,169,255,193,139,72,
255,180,118,44,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,88,64,19,255,94,66,21,255,156,105,37,255,180,118,44,255,
186,139,59,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_pencil(idata_pencil, 16, 16, 4, 0);

void Fldtk_Inspector::cb_2_i(Fl_Button*, void*) {
  InspectorStackTrace();
}
void Fldtk_Inspector::cb_2(Fl_Button* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()))->cb_2_i(o,v);
}

static unsigned char idata_layers[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,199,104,55,115,198,
104,55,113,195,101,55,110,191,98,55,106,187,95,55,102,182,92,55,98,176,88,55,93,
170,83,55,88,164,79,55,83,158,74,55,78,151,70,55,73,145,65,55,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,115,198,103,69,112,194,101,8,109,190,98,8,105,185,94,8,101,180,
91,8,97,175,87,8,92,169,82,8,87,162,78,8,82,156,73,8,76,149,69,8,71,143,64,8,
66,136,59,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,193,100,69,108,189,97,9,116,
199,104,130,115,198,104,130,113,194,101,130,110,190,98,130,106,186,95,130,101,
181,92,130,97,175,88,130,92,169,83,130,87,163,79,130,77,151,70,160,78,151,70,
126,73,145,65,126,0,0,0,0,0,0,0,0,107,188,96,69,103,183,93,10,115,198,103,162,
109,191,99,53,106,186,96,58,102,181,92,63,99,177,89,66,95,171,85,70,90,166,80,
74,85,160,76,76,80,154,71,80,66,137,61,122,71,143,64,74,66,136,59,158,0,0,0,0,
0,0,0,0,102,182,92,69,98,176,88,11,110,192,99,163,105,185,94,61,115,198,103,
216,114,197,103,217,112,193,100,218,108,189,97,219,104,185,93,220,100,180,90,
221,96,174,86,221,89,166,80,229,86,162,77,220,80,154,71,235,78,151,70,203,73,
145,65,203,97,175,87,69,92,169,82,13,106,187,95,163,100,179,90,68,115,198,103,
255,102,181,92,122,100,178,89,138,96,174,87,150,93,171,84,166,90,167,81,178,86,
162,77,188,80,153,71,209,78,151,70,198,71,142,64,223,71,143,64,177,66,136,59,
255,91,167,81,69,86,161,77,14,101,181,91,163,95,172,86,74,111,193,100,255,101,
180,90,156,97,175,87,169,94,171,84,182,90,166,81,192,86,161,76,199,81,155,73,
204,74,147,67,219,71,144,64,208,65,135,59,226,65,135,58,179,59,128,53,255,84,
159,76,69,79,153,71,16,96,174,86,164,88,165,80,82,107,188,96,255,98,176,88,184,
94,171,84,194,89,166,81,202,85,160,76,208,80,154,72,211,75,148,67,214,69,139,
61,224,65,135,58,213,59,127,53,226,58,127,52,177,53,120,48,255,78,151,70,69,73,
145,65,69,88,163,78,184,77,149,69,125,102,182,92,255,91,168,82,214,87,163,78,
218,82,157,74,221,77,151,69,224,72,144,65,224,67,138,60,225,62,131,55,225,59,
127,53,215,53,120,47,225,52,119,47,175,47,113,42,255,0,0,0,0,0,0,0,0,84,159,76,
158,79,153,71,82,97,175,87,255,89,165,79,207,84,158,75,211,78,152,70,213,72,145,
66,214,67,138,61,216,62,132,56,216,57,125,51,214,52,119,47,213,47,112,41,224,
46,111,41,171,42,106,37,255,0,0,0,0,0,0,0,0,78,151,70,158,73,145,65,158,91,167,
81,255,81,155,73,227,75,148,68,228,70,142,63,226,65,135,59,226,60,129,54,225,
55,122,49,224,50,117,45,224,46,111,41,223,41,105,37,222,41,105,37,166,37,100,
33,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,159,76,255,79,153,71,179,74,146,66,
178,69,140,61,177,63,133,57,175,58,127,52,174,53,120,48,171,48,114,43,168,44,
109,39,165,40,104,36,162,36,99,32,161,33,95,29,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,78,151,70,255,73,145,65,255,67,138,60,255,62,131,56,255,57,125,51,255,52,
119,47,255,47,113,42,255,43,107,38,255,39,102,35,255,35,98,32,255,32,94,29,255,
30,91,26,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_layers(idata_layers, 16, 16, 4, 0);

void Fldtk_Inspector::cb_3_i(Fl_Button*, void*) {
  InspectorExitBreakLoop();
}
void Fldtk_Inspector::cb_3(Fl_Button* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()))->cb_3_i(o,v);
}

static unsigned char idata_door_in[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,156,109,137,210,154,106,251,207,151,102,238,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,214,158,112,219,212,156,109,255,218,177,133,255,185,145,90,255,203,
147,96,234,0,0,0,0,0,0,0,0,128,128,128,255,126,126,126,255,124,124,124,255,122,
122,122,255,119,119,119,255,117,117,117,255,114,114,114,255,212,158,113,255,214,
158,111,255,220,178,135,255,232,211,171,255,230,208,169,255,184,144,88,255,198,
142,89,234,0,0,0,0,0,0,0,0,125,125,125,255,153,153,153,255,153,153,153,255,154,
154,154,255,154,154,154,255,155,155,155,255,155,155,155,255,211,157,111,255,231,
209,170,255,231,209,171,255,225,199,152,255,222,194,145,255,183,143,86,255,193,
137,82,234,0,0,0,0,0,0,0,0,122,122,122,255,153,153,153,255,89,145,82,255,153,
154,153,255,155,155,155,255,156,156,156,255,156,156,156,255,208,154,108,255,229,
206,167,255,223,193,143,255,220,189,137,255,220,189,139,255,182,141,83,255,188,
132,75,234,0,0,0,0,0,0,0,0,119,119,119,255,154,154,154,255,69,138,61,255,79,138,
73,255,156,156,156,255,157,157,157,255,157,157,157,255,204,150,102,255,227,203,
162,255,220,189,137,255,218,185,131,255,218,185,132,255,181,139,81,255,182,126,
67,234,77,148,68,255,75,145,66,255,72,141,63,255,69,137,61,255,101,164,93,255,
97,160,90,255,75,131,69,255,158,158,158,255,158,158,158,255,201,146,96,255,226,
199,158,255,218,184,131,255,215,180,125,255,215,179,126,255,180,137,79,255,177,
121,59,234,74,144,65,255,159,210,148,255,154,208,145,255,150,205,141,255,146,
203,137,255,141,200,132,255,88,152,81,255,70,124,65,255,159,159,159,255,196,142,
90,255,224,195,152,255,215,179,124,255,214,175,116,255,237,196,94,255,179,136,
75,255,171,115,52,234,70,139,62,255,153,206,143,255,135,198,125,255,129,195,
120,255,124,192,115,255,124,192,116,255,129,194,121,255,79,144,73,255,87,127,84,
255,191,137,84,255,221,191,148,255,212,173,117,255,225,184,99,255,255,212,75,
255,184,139,66,255,166,110,44,234,66,135,59,255,146,203,137,255,141,200,132,255,
136,198,128,255,131,195,123,255,127,193,119,255,77,143,71,255,63,116,59,255,161,
161,161,255,186,132,76,255,219,187,141,255,209,168,110,255,209,166,102,255,223,
180,95,255,177,133,71,255,161,105,37,234,62,130,55,255,59,126,52,255,55,121,49,
255,52,117,46,255,80,145,73,255,76,143,70,255,61,115,57,255,161,161,161,255,162,
162,162,255,180,126,69,255,217,183,136,255,207,163,103,255,204,158,97,255,204,
159,99,255,177,131,69,255,156,100,31,234,0,0,0,0,0,0,0,0,96,96,96,255,160,160,
160,255,65,118,61,255,57,113,54,255,162,162,162,255,162,162,162,255,163,163,163,
255,176,121,61,255,215,179,130,255,204,159,98,255,201,154,90,255,202,155,94,255,
175,129,67,255,152,96,25,234,0,0,0,0,0,0,0,0,92,92,92,255,161,161,161,255,64,
115,60,255,161,161,160,255,163,163,163,255,163,163,163,255,164,164,164,255,170,
116,54,255,212,175,125,255,201,154,91,255,199,149,84,255,200,150,88,255,174,128,
65,255,148,92,19,234,0,0,0,0,0,0,0,0,88,88,88,255,162,162,162,255,162,162,162,
255,163,163,163,255,164,164,164,255,164,164,164,255,165,165,165,255,165,111,47,
255,210,171,120,255,211,171,120,255,209,167,115,255,205,160,105,255,174,127,64,
255,145,89,15,234,153,153,153,255,113,113,113,255,84,84,84,255,81,81,81,255,79,
79,79,255,76,76,76,255,74,74,74,255,71,71,71,255,69,69,69,255,157,103,37,255,
168,116,50,255,175,124,61,255,181,132,71,255,186,138,78,255,173,126,62,255,143,
87,12,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,155,99,29,22,152,96,25,57,149,93,20,98,146,90,16,136,144,88,13,164,146,92,
19,252,143,87,12,237};
static Fl_RGB_Image image_door_in(idata_door_in, 16, 16, 4, 0);

void Fldtk_Inspector::cb_0_i(Fl_Menu_*, void*) {
  InspectorPrintDepth(0);
}
void Fldtk_Inspector::cb_0(Fl_Menu_* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()->user_data()))->cb_0_i(o,v);
}

void Fldtk_Inspector::cb_11_i(Fl_Menu_*, void*) {
  InspectorPrintDepth(1);
}
void Fldtk_Inspector::cb_11(Fl_Menu_* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()->user_data()))->cb_11_i(o,v);
}

void Fldtk_Inspector::cb_21_i(Fl_Menu_*, void*) {
  InspectorPrintDepth(2);
}
void Fldtk_Inspector::cb_21(Fl_Menu_* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()->user_data()))->cb_21_i(o,v);
}

void Fldtk_Inspector::cb_31_i(Fl_Menu_*, void*) {
  InspectorPrintDepth(3);
}
void Fldtk_Inspector::cb_31(Fl_Menu_* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()->user_data()))->cb_31_i(o,v);
}

void Fldtk_Inspector::cb_4_i(Fl_Menu_*, void*) {
  InspectorPrintDepth(4);
}
void Fldtk_Inspector::cb_4(Fl_Menu_* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()->user_data()))->cb_4_i(o,v);
}

void Fldtk_Inspector::cb_5_i(Fl_Menu_*, void*) {
  InspectorPrintDepth(5);
}
void Fldtk_Inspector::cb_5(Fl_Menu_* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()->user_data()))->cb_5_i(o,v);
}

void Fldtk_Inspector::cb_6_i(Fl_Menu_*, void*) {
  InspectorPrintDepth(6);
}
void Fldtk_Inspector::cb_6(Fl_Menu_* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()->user_data()))->cb_6_i(o,v);
}

void Fldtk_Inspector::cb_7_i(Fl_Menu_*, void*) {
  InspectorPrintDepth(7);
}
void Fldtk_Inspector::cb_7(Fl_Menu_* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()->user_data()))->cb_7_i(o,v);
}

void Fldtk_Inspector::cb_8_i(Fl_Menu_*, void*) {
  InspectorPrintDepth(8);
}
void Fldtk_Inspector::cb_8(Fl_Menu_* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()->user_data()))->cb_8_i(o,v);
}

void Fldtk_Inspector::cb_9_i(Fl_Menu_*, void*) {
  InspectorPrintDepth(9);
}
void Fldtk_Inspector::cb_9(Fl_Menu_* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()->user_data()))->cb_9_i(o,v);
}

Fl_Menu_Item Fldtk_Inspector::menu_[] = {
 {"0", 0,  (Fl_Callback*)Fldtk_Inspector::cb_0, 0, 0, FL_NORMAL_LABEL, 0, 11, 0},
 {"1", 0,  (Fl_Callback*)Fldtk_Inspector::cb_11, 0, 0, FL_NORMAL_LABEL, 0, 11, 0},
 {"2", 0,  (Fl_Callback*)Fldtk_Inspector::cb_21, 0, 0, FL_NORMAL_LABEL, 0, 11, 0},
 {"3", 0,  (Fl_Callback*)Fldtk_Inspector::cb_31, 0, 0, FL_NORMAL_LABEL, 0, 11, 0},
 {"4", 0,  (Fl_Callback*)Fldtk_Inspector::cb_4, 0, 0, FL_NORMAL_LABEL, 0, 11, 0},
 {"5", 0,  (Fl_Callback*)Fldtk_Inspector::cb_5, 0, 0, FL_NORMAL_LABEL, 0, 11, 0},
 {"6", 0,  (Fl_Callback*)Fldtk_Inspector::cb_6, 0, 0, FL_NORMAL_LABEL, 0, 11, 0},
 {"7", 0,  (Fl_Callback*)Fldtk_Inspector::cb_7, 0, 0, FL_NORMAL_LABEL, 0, 11, 0},
 {"8", 0,  (Fl_Callback*)Fldtk_Inspector::cb_8, 0, 0, FL_NORMAL_LABEL, 0, 11, 0},
 {"9", 0,  (Fl_Callback*)Fldtk_Inspector::cb_9, 0, 0, FL_NORMAL_LABEL, 0, 11, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Fldtk_Inspector::cb_Test_i(Fl_Button*, void*) {
  send_test(1);
}
void Fldtk_Inspector::cb_Test(Fl_Button* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()))->cb_Test_i(o,v);
}

void Fldtk_Inspector::cb_Test1_i(Fl_Button*, void*) {
  send_test(2);
}
void Fldtk_Inspector::cb_Test1(Fl_Button* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()))->cb_Test1_i(o,v);
}

void Fldtk_Inspector::cb_Test2_i(Fl_Button*, void*) {
  send_test(3);
}
void Fldtk_Inspector::cb_Test2(Fl_Button* o, void* v) {
  ((Fldtk_Inspector*)(o->parent()->parent()))->cb_Test2_i(o,v);
}
Fldtk_Inspector::Fldtk_Inspector(int X, int Y, int W, int H, const char *L)
  : Fl_Group(0, 0, W, H, L) {
{ Fl_Group* o = new Fl_Group(0, 0, 775, 35);
  o->box(FL_FLAT_BOX);
  { wConnect = new Fl_Button(5, 5, 25, 25);
    wConnect->tooltip("Connect/Disconnect");
    wConnect->image(image_toolbox_closed);
    wConnect->deimage(image_toolbox_inactive);
    wConnect->labelsize(9);
    wConnect->labelcolor(FL_GRAY0);
    wConnect->callback((Fl_Callback*)cb_wConnect);
    wInspectorConnect = wConnect;
  } // Fl_Button* wConnect
  { Fl_Button* o = new Fl_Button(30, 5, 25, 25);
    o->tooltip("Stop on throws");
    o->image(image_stop);
    o->labelsize(9);
    o->labelcolor(FL_GRAY0);
    o->callback((Fl_Callback*)cb_);
  } // Fl_Button* o
  { Fl_Button* o = new Fl_Button(55, 5, 25, 25);
    o->tooltip("Trace off");
    o->image(image_pencil);
    o->labelsize(9);
    o->labelcolor(FL_GRAY0);
    o->callback((Fl_Callback*)cb_1);
  } // Fl_Button* o
  { Fl_Button* o = new Fl_Button(80, 5, 25, 25);
    o->tooltip("Stack trace");
    o->image(image_layers);
    o->labelsize(9);
    o->labelcolor(FL_GRAY0);
    o->callback((Fl_Callback*)cb_2);
  } // Fl_Button* o
  { Fl_Button* o = new Fl_Button(105, 5, 25, 25);
    o->tooltip("Exit break loop");
    o->image(image_door_in);
    o->labelsize(9);
    o->labelcolor(FL_GRAY0);
    o->callback((Fl_Callback*)cb_3);
  } // Fl_Button* o
  { Fl_Choice* o = new Fl_Choice(135, 6, 50, 23);
    o->tooltip("Print Depth");
    o->down_box(FL_BORDER_BOX);
    o->menu(menu_);
  } // Fl_Choice* o
  { Fl_Box* o = new Fl_Box(440, 5, 120, 25);
    Fl_Group::current()->resizable(o);
  } // Fl_Box* o
  { serial = new Flio_Inspector(715, 7, 55, 21);
    serial->box(FL_DOWN_BOX);
    serial->color(FL_BACKGROUND_COLOR);
    serial->selection_color(FL_BACKGROUND_COLOR);
    serial->labeltype(FL_NORMAL_LABEL);
    serial->labelfont(0);
    serial->labelsize(14);
    serial->labelcolor(FL_FOREGROUND_COLOR);
    serial->align(FL_ALIGN_CENTER);
    serial->when(FL_WHEN_RELEASE);
    wInspectorSerial = serial;
  } // Flio_Inspector* serial
  { Fl_Button* o = new Fl_Button(215, 5, 25, 25, "Test\n1");
    o->labelsize(9);
    o->labelcolor(FL_GRAY0);
    o->callback((Fl_Callback*)cb_Test);
    o->hide();
  } // Fl_Button* o
  { Fl_Button* o = new Fl_Button(240, 5, 25, 25, "Test\n2");
    o->labelsize(9);
    o->labelcolor(FL_GRAY0);
    o->callback((Fl_Callback*)cb_Test1);
    o->hide();
  } // Fl_Button* o
  { Fl_Button* o = new Fl_Button(265, 5, 25, 25, "Test\n3");
    o->labelsize(9);
    o->labelcolor(FL_GRAY0);
    o->callback((Fl_Callback*)cb_Test2);
    o->hide();
  } // Fl_Button* o
  o->end();
} // Fl_Group* o
{ Flmm_Console* o = console = new Flmm_Console(0, 35, 775, 104);
  console->tooltip("Connect/Disconnect");
  console->box(FL_DOWN_FRAME);
  console->color(FL_BACKGROUND2_COLOR);
  console->selection_color(FL_SELECTION_COLOR);
  console->labeltype(FL_NORMAL_LABEL);
  console->labelfont(0);
  console->labelsize(14);
  console->labelcolor(FL_FOREGROUND_COLOR);
  console->textfont(4);
  console->textsize(12);
  console->align(FL_ALIGN_TOP);
  console->when(FL_WHEN_ENTER_KEY_ALWAYS);
  Fl_Group::current()->resizable(console);
  o->buffer(new Fl_Text_Buffer);
  wConsole = console;
} // Flmm_Console* console
position(X, Y);
end();
}

//
// Copyright (C) 2007 Matthias Melcher
//
