# data file for the Fltk User Interface Designer (fluid)
version 1.0300 
header_name {.h} 
code_name {.cxx}
comment {//
// DyneTK, the Dyne Toolkit
// Copyright (C) 2007 Matthias Melcher
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
} {in_source in_header
} 

decl {\#include "allNewt.h"} {public
} 

decl {\#include "fltk/Flmp_Image.H"} {public
} 

decl {\#include <FL/Fl_RGB_Image.H>} {public
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public
} 

Function {show_snapshot_window()} {open return_type void
} {
  codeblock {if (!snapshot)} {open
  } {
    Fl_Window snapshot {
      label {Snapshot Manager} open
      xywh {529 326 350 547} type Double visible
    } {
      Fl_Box wImage {
        label {Loading Snapshot...}
        xywh {10 10 330 490} box THIN_DOWN_BOX
      }
      Fl_Button {} {
        label {Save As JPEG...}
        callback {Flmp_Image *img = (Flmp_Image*)wImage->image();
if (!img) 
  return;
  
const char *filename = fl_file_chooser("Save As JPEG", "*.jpg", 0);
if (filename) {
  char buf[2048];
  const char *ext = fl_filename_ext(filename);
  if (ext==0L || *ext==0) {
    strcpy(buf, filename);
    fl_filename_setext(buf, 2047, ".jpg");
    filename = buf;
  }
  img->save_jpeg(filename, 90);
}} selected
        xywh {230 510 110 25} labelsize 12
      }
    }
  }
  code {// show message about loading the image
Fl_Image *old_img = wImage->image();
delete old_img;
wImage->image(0);
wImage->label("Loading Snapshot...");

snapshot->show();} {}
} 

Function {update_snapshot_window(Flmp_Image *img)} {open return_type void
} {
  code {// replace label with snapshot image
if (!snapshot)
  show_snapshot_window();

if (img)
  wImage->label(0);
else
  wImage->label("Error loading Snapshot");
  
Fl_Image *oldImg = wImage->image();
wImage->image(0);
delete oldImg;

wImage->image(img);
wImage->redraw();
  
snapshot->show();} {}
} 

comment {
//
// DyneTK, the Dyne Toolkit
// Copyright (C) 2007 Matthias Melcher
//} {in_source in_header
} 
