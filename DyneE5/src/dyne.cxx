// generated by Fast Light User Interface Designer (fluid) version 1.0108

#include "dyne.h"
#include <FL/fl_file_chooser.H>
#include <FL/fl_ask.H>
#include <stdlib.h>
#include "cpu.h"
#include "symbols.h"

static void exit_cb(Fl_Widget*,void*) {
  exit(0);
}

Fl_Double_Window *wMain=(Fl_Double_Window *)0;

static void cb_Save(Fl_Menu_*, void*) {
  const char *fn = fl_file_chooser("Dump Flash Memory", "", wFilenameFlash->value());
if (fn) {
  cFlash->save(fn);
};
}

static void cb_Save1(Fl_Menu_*, void*) {
  const char *fn = fl_file_chooser("Dump System RAM", "", wFilenameRAM->value());
if (fn) {
  cRAM->save(fn);
};
}

static void cb_Quit(Fl_Menu_*, void*) {
  wMain->hide();
}

static void cb_R0(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[0]);
const char *t = fl_input("R0", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[0]);
update_gui();
}

static void cb_R1(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[1]);
const char *t = fl_input("R1", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[1]);
update_gui();
}

static void cb_R2(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[2]);
const char *t = fl_input("R2", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[2]);
update_gui();
}

static void cb_R3(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[3]);
const char *t = fl_input("R3", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[3]);
update_gui();
}

static void cb_R4(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[4]);
const char *t = fl_input("R4", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[4]);
update_gui();
}

static void cb_R5(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[5]);
const char *t = fl_input("R5", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[5]);
update_gui();
}

static void cb_R6(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[6]);
const char *t = fl_input("R6", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[6]);
update_gui();
}

static void cb_R7(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[7]);
const char *t = fl_input("R7", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[7]);
update_gui();
}

static void cb_R8(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[8]);
const char *t = fl_input("R8", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[8]);
update_gui();
}

static void cb_R9(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[9]);
const char *t = fl_input("R9", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[9]);
update_gui();
}

static void cb_R10(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[10]);
const char *t = fl_input("R10", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[10]);
update_gui();
}

static void cb_R11(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[11]);
const char *t = fl_input("R11", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[11]);
update_gui();
}

static void cb_R12(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[12]);
const char *t = fl_input("R12", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[12]);
update_gui();
}

static void cb_SP(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[13]);
const char *t = fl_input("SP", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[13]);
update_gui();
}

static void cb_LR(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[14]);
const char *t = fl_input("LR", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[14]);
update_gui();
}

static void cb_Set(Fl_Menu_*, void*) {
  char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[15]);
const char *t = fl_input("Set Breakpoint", buf);
unsigned int bp;
if (t) {
  sscanf(t, "%x", &bp);
  symbols->set_breakpoint(bp);
}
update_gui();
}

static void cb_Preferences(Fl_Menu_*, void*) {
  show_preferences();
}

static void cb_Reload(Fl_Menu_*, void*) {
  symbols->clear();
read_symbols();
update_gui();
}

static void cb_Enable(Fl_Menu_* o, void*) {
  cpu->enable_watchpoints(o->mvalue()->value());
}

static void cb_Save2(Fl_Menu_*, void*) {
  const char *fn = fl_file_chooser("Save GPIO access log", "", "");
if (fn) save_gpio(fn);
}

static void cb_Save3(Fl_Menu_*, void*) {
  const char *fn = fl_file_chooser("Save Disassembled Code", "*.asm", "");
if (fn) wAsmView->save_marked(fn);
}

static void cb_Save4(Fl_Menu_*, void*) {
  const char *fn = fl_file_chooser("Save pseudo \"C\" Code", "*.cpp", "");
if (fn) wAsmView->save_marked_cc(fn);
}

static void cb_Save5(Fl_Menu_*, void*) {
  const char *fn = fl_file_chooser("Save Ticks", "*.txt", "");
if (fn) symbols->save_ticks(fn);
}

static void cb_Save6(Fl_Menu_*, void*) {
  const char *fn = fl_dir_chooser("Save pseudo \"C\" tree", "pseudo_c");
if (fn) desym(fn);
}

static void cb_About(Fl_Menu_*, void*) {
  fl_message("DyneE5\n\nA PDA Emulator.");
}

Fl_Menu_Item menu_[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Flash Memory...", 0,  (Fl_Callback*)cb_Save, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save RAM...", 0,  (Fl_Callback*)cb_Save1, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Quit", 0x40071,  (Fl_Callback*)cb_Quit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Edit", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"R0", 0,  (Fl_Callback*)cb_R0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"R1", 0,  (Fl_Callback*)cb_R1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"R2", 0,  (Fl_Callback*)cb_R2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"R3", 0,  (Fl_Callback*)cb_R3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"R4", 0,  (Fl_Callback*)cb_R4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"R5", 0,  (Fl_Callback*)cb_R5, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"R6", 0,  (Fl_Callback*)cb_R6, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"R7", 0,  (Fl_Callback*)cb_R7, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"R8", 0,  (Fl_Callback*)cb_R8, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"R9", 0,  (Fl_Callback*)cb_R9, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"R10", 0,  (Fl_Callback*)cb_R10, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"R11", 0,  (Fl_Callback*)cb_R11, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"R12", 0,  (Fl_Callback*)cb_R12, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"SP", 0,  (Fl_Callback*)cb_SP, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"LR", 0,  (Fl_Callback*)cb_LR, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Set Breakpoint", 0,  (Fl_Callback*)cb_Set, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Preferences...", 0,  (Fl_Callback*)cb_Preferences, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Symbols", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Reload", 0,  (Fl_Callback*)cb_Reload, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Enable Watchpoints", 0,  (Fl_Callback*)cb_Enable, 0, 6, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Dump", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save GPIO Access...", 0,  (Fl_Callback*)cb_Save2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Disassembly...", 0,  (Fl_Callback*)cb_Save3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save pseudo \"C\"...", 0,  (Fl_Callback*)cb_Save4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Ticks...", 0,  (Fl_Callback*)cb_Save5, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save pseudo \"C\" tree...", 0,  (Fl_Callback*)cb_Save6, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Help", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"About...", 0,  (Fl_Callback*)cb_About, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Dn_Screen *wScreen=(Dn_Screen *)0;

Dn_Register_View *wRegisterView=(Dn_Register_View *)0;

Fl_Button *wStopRun=(Fl_Button *)0;

static void cb_wStopRun(Fl_Button*, void*) {
  cpu->stop_run();
}

static void cb_(Fl_Button*, void*) {
  cpu->step_into();
update_gui();
}

static void cb_redo(Fl_Button*, void*) {
  cpu->step_over();
update_gui();
}

static void cb_redo1(Fl_Button*, void*) {
  cpu->step_over_no_sim();
update_gui();
}

static void cb_pc(Fl_Input* o, void*) {
  cpu->set_pc(o->value());
o->value("");
}

static void cb_mem(Fl_Input* o, void*) {
  wHexView->set_base(o->value());
o->value("");
}

static void cb_BP(Fl_Button*, void*) {
  cpu->toggle_breakpoint();
wAsmView->redraw();
}

static void cb_Tr(Fl_Button*, void*) {
  cpu->toggle_trace();
wAsmView->redraw();
}

static void cb_1(Fl_Button*, void*) {
  add_edit_comment();
}

Dn_Hex_View *wHexView=(Dn_Hex_View *)0;

Dn_Asm_View *wAsmView=(Dn_Asm_View *)0;

Dn_Asm_View *wTracebackView=(Dn_Asm_View *)0;

Fl_Double_Window* create_gui() {
  { wMain = new Fl_Double_Window(1123, 550, "DyneE5 V0.0.1");
    wMain->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 335, 25);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { wScreen = new Dn_Screen(5, 28, 330, 512, "screen");
      wScreen->box(FL_DOWN_BOX);
      wScreen->color(FL_BACKGROUND_COLOR);
      wScreen->selection_color(FL_BACKGROUND_COLOR);
      wScreen->labeltype(FL_NORMAL_LABEL);
      wScreen->labelfont(0);
      wScreen->labelsize(12);
      wScreen->labelcolor(FL_FOREGROUND_COLOR);
      wScreen->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      wScreen->when(FL_WHEN_RELEASE);
    } // Dn_Screen* wScreen
    { wRegisterView = new Dn_Register_View(340, 6, 105, 534);
      wRegisterView->box(FL_DOWN_BOX);
      wRegisterView->color(FL_BACKGROUND_COLOR);
      wRegisterView->selection_color(FL_BACKGROUND_COLOR);
      wRegisterView->labeltype(FL_NORMAL_LABEL);
      wRegisterView->labelfont(0);
      wRegisterView->labelsize(14);
      wRegisterView->labelcolor(FL_FOREGROUND_COLOR);
      wRegisterView->align(FL_ALIGN_CENTER);
      wRegisterView->when(FL_WHEN_RELEASE);
    } // Dn_Register_View* wRegisterView
    { Fl_Group* o = new Fl_Group(450, 4, 660, 22);
      { wStopRun = new Fl_Button(450, 5, 25, 20, "@>");
        wStopRun->tooltip("continue/stop (c)");
        wStopRun->shortcut(0x63);
        wStopRun->color(FL_LIGHT1);
        wStopRun->labelsize(12);
        wStopRun->labelcolor((Fl_Color)40);
        wStopRun->callback((Fl_Callback*)cb_wStopRun);
      } // Fl_Button* wStopRun
      { Fl_Button* o = new Fl_Button(480, 5, 25, 20, "@|>");
        o->tooltip("single step, step into (s)");
        o->shortcut(0x73);
        o->color(FL_LIGHT1);
        o->labelsize(12);
        o->labelcolor((Fl_Color)40);
        o->callback((Fl_Callback*)cb_);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(510, 5, 25, 20, "@redo");
        o->tooltip("next, step over (n)");
        o->shortcut(0x6e);
        o->color(FL_LIGHT1);
        o->labelsize(12);
        o->labelcolor((Fl_Color)40);
        o->callback((Fl_Callback*)cb_redo);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(540, 5, 25, 20, "@redo");
        o->tooltip("next, step over, don\'t trace (n)");
        o->shortcut(0x1006e);
        o->color(FL_LIGHT1);
        o->labelsize(12);
        o->labelcolor((Fl_Color)1);
        o->callback((Fl_Callback*)cb_redo1);
      } // Fl_Button* o
      { Fl_Input* o = new Fl_Input(680, 4, 105, 20, "pc:");
        o->labelsize(12);
        o->textfont(4);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_pc);
        o->when(FL_WHEN_ENTER_KEY);
      } // Fl_Input* o
      { Fl_Input* o = new Fl_Input(825, 4, 101, 20, "mem:");
        o->labelsize(12);
        o->textfont(4);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_mem);
        o->when(FL_WHEN_ENTER_KEY);
      } // Fl_Input* o
      { Fl_Button* o = new Fl_Button(570, 5, 25, 20, "BP");
        o->tooltip("toggle breakpoint (b)");
        o->shortcut(0x62);
        o->color(FL_LIGHT1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_BP);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(600, 5, 25, 20, "Tr");
        o->tooltip("toggle trace (t)");
        o->shortcut(0x74);
        o->color(FL_LIGHT1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Tr);
      } // Fl_Button* o
      { Fl_Box* o = new Fl_Box(1100, 4, 10, 22);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      { Fl_Button* o = new Fl_Button(630, 4, 25, 20, "//");
        o->tooltip("add a comment (/)");
        o->shortcut(0x2f);
        o->color(FL_LIGHT1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_1);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Tabs* o = new Fl_Tabs(450, 30, 660, 510);
      { Fl_Group* o = new Fl_Group(450, 50, 660, 490, "DyneE5");
        { Fl_Tile* o = new Fl_Tile(455, 55, 650, 480);
          { Fl_Group* o = new Fl_Group(455, 55, 650, 70);
            o->box(FL_FLAT_BOX);
            { wHexView = new Dn_Hex_View(455, 55, 650, 65);
              wHexView->box(FL_DOWN_BOX);
              wHexView->color(FL_BACKGROUND_COLOR);
              wHexView->selection_color(FL_BACKGROUND_COLOR);
              wHexView->labeltype(FL_NORMAL_LABEL);
              wHexView->labelfont(0);
              wHexView->labelsize(14);
              wHexView->labelcolor(FL_FOREGROUND_COLOR);
              wHexView->align(FL_ALIGN_CENTER);
              wHexView->when(FL_WHEN_RELEASE);
              Fl_Group::current()->resizable(wHexView);
            } // Dn_Hex_View* wHexView
            o->end();
          } // Fl_Group* o
          { wAsmView = new Dn_Asm_View(455, 125, 650, 410);
            wAsmView->box(FL_DOWN_BOX);
            wAsmView->color(FL_BACKGROUND_COLOR);
            wAsmView->selection_color(FL_BACKGROUND_COLOR);
            wAsmView->labeltype(FL_NORMAL_LABEL);
            wAsmView->labelfont(0);
            wAsmView->labelsize(14);
            wAsmView->labelcolor(FL_FOREGROUND_COLOR);
            wAsmView->align(FL_ALIGN_CENTER);
            wAsmView->when(FL_WHEN_RELEASE);
          } // Dn_Asm_View* wAsmView
          o->end();
          Fl_Group::current()->resizable(o);
        } // Fl_Tile* o
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(450, 50, 660, 490, "Trace");
        o->hide();
        { wTracebackView = new Dn_Asm_View(455, 55, 650, 480);
          wTracebackView->box(FL_DOWN_BOX);
          wTracebackView->color(FL_BACKGROUND_COLOR);
          wTracebackView->selection_color(FL_BACKGROUND_COLOR);
          wTracebackView->labeltype(FL_NORMAL_LABEL);
          wTracebackView->labelfont(0);
          wTracebackView->labelsize(14);
          wTracebackView->labelcolor(FL_FOREGROUND_COLOR);
          wTracebackView->align(FL_ALIGN_CENTER);
          wTracebackView->when(FL_WHEN_RELEASE);
          Fl_Group::current()->resizable(wTracebackView);
        } // Dn_Asm_View* wTracebackView
        o->end();
      } // Fl_Group* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Tabs* o
    wMain->end();
  } // Fl_Double_Window* wMain
  return wMain;
}

void update_gui() {
  //wHexView->base(cpu->get_pc());
wAsmView->base(cpu->get_pc());
wMain->redraw();
}

Fl_Double_Window *wPreferences=(Fl_Double_Window *)0;

static void cb_wPreferences(Fl_Double_Window* o, void*) {
  save_preferences();
o->hide();
}

Fl_Input *wFilenameROM=(Fl_Input *)0;

Fl_Button *wFilechooserROM=(Fl_Button *)0;

static void cb_wFilechooserROM(Fl_Button*, void*) {
  Fl_Input *wi = wFilenameROM;

const char *fn = fl_file_chooser("Please choose a ROM file", "", wi->value(), 1);
if (fn) {
  wi->value(fn);
  wi->do_callback();
};
}

Fl_Input *wFilenameRAM=(Fl_Input *)0;

Fl_Button *wFilechooserRAM=(Fl_Button *)0;

static void cb_wFilechooserRAM(Fl_Button*, void*) {
  Fl_Input *wi = wFilenameRAM;

const char *fn = fl_file_chooser("Please choose a RAM file", "", wi->value(), 1);
if (fn) {
  wi->value(fn);
  wi->do_callback();
};
}

Fl_Input *wFilenameFlash=(Fl_Input *)0;

Fl_Button *wFilechooserFlash=(Fl_Button *)0;

static void cb_wFilechooserFlash(Fl_Button*, void*) {
  Fl_Input *wi = wFilenameFlash;

const char *fn = fl_file_chooser("Please choose a Flash RAM file", "", wi->value(), 1);
if (fn) {
  wi->value(fn);
  wi->do_callback();
};
}

Fl_Input *wFilenameSymbols=(Fl_Input *)0;

Fl_Button *wFilechooserSymbols=(Fl_Button *)0;

static void cb_wFilechooserSymbols(Fl_Button*, void*) {
  Fl_Input *wi = wFilenameSymbols;

const char *fn = fl_file_chooser("Please choose a symbols file", "", wi->value(), 1);
if (fn) {
  wi->value(fn);
  wi->do_callback();
};
}

Fl_Input *wFilenameComments=(Fl_Input *)0;

Fl_Button *wFilechooserComments=(Fl_Button *)0;

static void cb_wFilechooserComments(Fl_Button*, void*) {
  Fl_Input *wi = wFilenameComments;

const char *fn = fl_file_chooser("Please choose a comments file", "", wi->value(), 1);
if (fn) {
  wi->value(fn);
  wi->do_callback();
};
}

Fl_Input *wFilenameBreakpoints=(Fl_Input *)0;

Fl_Button *wFilechooserBreakpoints=(Fl_Button *)0;

static void cb_wFilechooserBreakpoints(Fl_Button*, void*) {
  Fl_Input *wi = wFilenameBreakpoints;

const char *fn = fl_file_chooser("Please choose a breakpoints file", "", wi->value(), 1);
if (fn) {
  wi->value(fn);
  wi->do_callback();
};
}

Fl_Check_Button *wSaveRAM=(Fl_Check_Button *)0;

Fl_Check_Button *wSaveFlash=(Fl_Check_Button *)0;

static void cb_Close(Fl_Button* o, void*) {
  o->window()->do_callback();
}

Fl_Double_Window* create_preferences_dialog() {
  { wPreferences = new Fl_Double_Window(485, 437, "DyneE5 Preferences");
    wPreferences->callback((Fl_Callback*)cb_wPreferences);
    { Fl_Tabs* o = new Fl_Tabs(5, 5, 475, 390);
      { Fl_Group* o = new Fl_Group(5, 25, 475, 370, "Memory");
        { wFilenameROM = new Fl_Input(105, 55, 330, 20, "ROM:");
          wFilenameROM->tooltip("Choose a ROM image file. This can be either a binary ROM dump or an ARM .aif \
file containing the ROM. DyneE5 supports MP2100 ROMs.");
          wFilenameROM->textsize(13);
        } // Fl_Input* wFilenameROM
        { Fl_Button* o = wFilechooserROM = new Fl_Button(435, 55, 25, 20, "@-1fileopen");
          wFilechooserROM->callback((Fl_Callback*)cb_wFilechooserROM);
          o->labelcolor(3);
        } // Fl_Button* wFilechooserROM
        { wFilenameRAM = new Fl_Input(105, 80, 330, 20, "RAM:");
          wFilenameRAM->tooltip("Choose an optional RAM image file. A valid RAM image will accelerate reboots.");
          wFilenameRAM->textsize(13);
        } // Fl_Input* wFilenameRAM
        { Fl_Button* o = wFilechooserRAM = new Fl_Button(435, 80, 25, 20, "@-1fileopen");
          wFilechooserRAM->callback((Fl_Callback*)cb_wFilechooserRAM);
          o->labelcolor(3);
        } // Fl_Button* wFilechooserRAM
        { wFilenameFlash = new Fl_Input(105, 125, 330, 20, "Internal Flash:");
          wFilenameFlash->tooltip("Choose an optional internal Flash RAM image file. Without a Flash file, DyneE\
5 will forget all settings and all installed software between restarts.");
          wFilenameFlash->textsize(13);
        } // Fl_Input* wFilenameFlash
        { Fl_Button* o = wFilechooserFlash = new Fl_Button(435, 125, 25, 20, "@-1fileopen");
          wFilechooserFlash->callback((Fl_Callback*)cb_wFilechooserFlash);
          o->labelcolor(3);
        } // Fl_Button* wFilechooserFlash
        { wFilenameSymbols = new Fl_Input(105, 195, 330, 20, "Symbols:");
          wFilenameSymbols->tooltip("Choose a file that contains symbolic information.");
          wFilenameSymbols->textsize(13);
        } // Fl_Input* wFilenameSymbols
        { Fl_Button* o = wFilechooserSymbols = new Fl_Button(435, 195, 25, 20, "@-1fileopen");
          wFilechooserSymbols->callback((Fl_Callback*)cb_wFilechooserSymbols);
          o->labelcolor(3);
        } // Fl_Button* wFilechooserSymbols
        { wFilenameComments = new Fl_Input(105, 220, 330, 20, "Comments:");
          wFilenameComments->tooltip("Choose an optional file that may contain commentary and other symbolic inform\
ation.");
          wFilenameComments->textsize(13);
        } // Fl_Input* wFilenameComments
        { Fl_Button* o = wFilechooserComments = new Fl_Button(435, 220, 25, 20, "@-1fileopen");
          wFilechooserComments->callback((Fl_Callback*)cb_wFilechooserComments);
          o->labelcolor(3);
        } // Fl_Button* wFilechooserComments
        { wFilenameBreakpoints = new Fl_Input(105, 245, 330, 20, "Breakpoints:");
          wFilenameBreakpoints->tooltip("Choose an optional file that may contain a list of breakpoints and watchpoint\
s.");
          wFilenameBreakpoints->textsize(13);
        } // Fl_Input* wFilenameBreakpoints
        { Fl_Button* o = wFilechooserBreakpoints = new Fl_Button(435, 245, 25, 20, "@-1fileopen");
          wFilechooserBreakpoints->callback((Fl_Callback*)cb_wFilechooserBreakpoints);
          o->labelcolor(3);
        } // Fl_Button* wFilechooserBreakpoints
        { wSaveRAM = new Fl_Check_Button(105, 100, 165, 20, "save on exit");
          wSaveRAM->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* wSaveRAM
        { wSaveFlash = new Fl_Check_Button(105, 145, 165, 20, "save on exit");
          wSaveFlash->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* wSaveFlash
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(5, 25, 475, 370, "Logs");
        o->hide();
        { Fl_Input* o = new Fl_Input(105, 55, 330, 20, "Full Trace:");
          o->deactivate();
        } // Fl_Input* o
        { Fl_Input* o = new Fl_Input(105, 80, 330, 20, "Call Trace:");
          o->deactivate();
        } // Fl_Input* o
        { Fl_Input* o = new Fl_Input(105, 105, 330, 20, "Illegal Access:");
          o->deactivate();
        } // Fl_Input* o
        { Fl_Input* o = new Fl_Input(105, 130, 330, 20, "Hit Count:");
          o->deactivate();
        } // Fl_Input* o
        { Fl_Input* o = new Fl_Input(105, 185, 330, 20, "Pseudo \"C\":");
          o->deactivate();
        } // Fl_Input* o
        { Fl_Input* o = new Fl_Input(105, 210, 330, 20, "Excerpts:");
          o->deactivate();
        } // Fl_Input* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Button* o = new Fl_Button(395, 405, 80, 20, "Close");
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    wPreferences->set_modal();
    wPreferences->end();
  } // Fl_Double_Window* wPreferences
  return wPreferences;
}
