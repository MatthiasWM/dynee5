# data file for the Fltk User Interface Designer (fluid)
version 1.0108 
header_name {.h} 
code_name {.cxx}
decl {\#include "main.h"} {public
} 

decl {\#include "memory.h"} {public
} 

decl {\#include "asmview.h"} {public
} 

decl {\#include "hexview.h"} {public
} 

decl {\#include "registerview.h"} {public
} 

decl {\#include <FL/fl_file_chooser.H>} {} 

decl {\#include <FL/fl_ask.H>} {} 

decl {\#include <stdlib.h>} {} 

decl {\#include "cpu.h"} {} 

decl {\#include "symbols.h"} {} 

decl {\#include "screen.h"} {public
} 

Function {exit_cb(Fl_Widget*,void*)} {open private return_type {static void}
} {
  code {exit(0);} {}
} 

Function {create_gui()} {open
} {
  Fl_Window wMain {
    label {DyneE5 V0.0.1} open
    xywh {270 222 1123 550} type Double align 80 resizable visible
  } {
    Fl_Menu_Bar {} {open
      xywh {0 0 335 25}
    } {
      Submenu {} {
        label File open
        xywh {0 0 100 20}
      } {
        MenuItem {} {
          label {Save Flash Memory...}
          callback {const char *fn = fl_file_chooser("Dump Flash Memory", "", wFilenameFlash->value());
if (fn) {
  cFlash->save(fn);
}}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label {Save RAM...}
          callback {const char *fn = fl_file_chooser("Dump System RAM", "", wFilenameRAM->value());
if (fn) {
  cRAM->save(fn);
}}
          xywh {10 10 100 20} divider
        }
        MenuItem {} {
          label {&Quit}
          callback {wMain->hide();}
          xywh {0 0 100 20} shortcut 0x40071
        }
      }
      Submenu {} {
        label Edit
        xywh {0 0 100 20}
      } {
        MenuItem {} {
          label R0
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[0]);
const char *t = fl_input("R0", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[0]);
update_gui();}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label R1
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[1]);
const char *t = fl_input("R1", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[1]);
update_gui();}
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label R2
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[2]);
const char *t = fl_input("R2", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[2]);
update_gui();}
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label R3
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[3]);
const char *t = fl_input("R3", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[3]);
update_gui();}
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label R4
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[4]);
const char *t = fl_input("R4", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[4]);
update_gui();}
          xywh {40 40 100 20}
        }
        MenuItem {} {
          label R5
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[5]);
const char *t = fl_input("R5", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[5]);
update_gui();}
          xywh {50 50 100 20}
        }
        MenuItem {} {
          label R6
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[6]);
const char *t = fl_input("R6", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[6]);
update_gui();}
          xywh {60 60 100 20}
        }
        MenuItem {} {
          label R7
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[7]);
const char *t = fl_input("R7", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[7]);
update_gui();}
          xywh {70 70 100 20}
        }
        MenuItem {} {
          label R8
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[8]);
const char *t = fl_input("R8", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[8]);
update_gui();}
          xywh {80 80 100 20}
        }
        MenuItem {} {
          label R9
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[9]);
const char *t = fl_input("R9", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[9]);
update_gui();}
          xywh {90 90 100 20}
        }
        MenuItem {} {
          label R10
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[10]);
const char *t = fl_input("R10", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[10]);
update_gui();}
          xywh {100 100 100 20}
        }
        MenuItem {} {
          label R11
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[11]);
const char *t = fl_input("R11", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[11]);
update_gui();}
          xywh {110 110 100 20}
        }
        MenuItem {} {
          label R12
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[12]);
const char *t = fl_input("R12", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[12]);
update_gui();}
          xywh {120 120 100 20}
        }
        MenuItem {} {
          label SP
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[13]);
const char *t = fl_input("SP", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[13]);
update_gui();}
          xywh {130 130 100 20}
        }
        MenuItem {} {
          label LR
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[14]);
const char *t = fl_input("LR", buf);
if (t) sscanf(t, "%x", &cpu->state->Reg[14]);
update_gui();}
          xywh {140 140 100 20} divider
        }
        MenuItem {} {
          label {Set Breakpoint}
          callback {char buf[30];
sprintf(buf, "%08x", cpu->state->Reg[15]);
const char *t = fl_input("Set Breakpoint", buf);
unsigned int bp;
if (t) {
  sscanf(t, "%x", &bp);
  symbols->set_breakpoint(bp);
}
update_gui();}
          xywh {0 0 100 20} divider
        }
        MenuItem {} {
          label {Preferences...}
          callback {show_preferences();}
          xywh {0 0 100 20}
        }
      }
      Submenu {} {
        label Symbols open
        xywh {0 0 100 20}
      } {
        MenuItem {} {
          label Reload
          callback {symbols->clear();
read_symbols();
update_gui();}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label {Enable Watchpoints}
          callback {cpu->enable_watchpoints(o->mvalue()->value());}
          xywh {0 0 100 20} type Toggle value 1
        }
      }
      Submenu {} {
        label Dump open
        xywh {0 0 62 20}
      } {
        MenuItem {} {
          label {Save GPIO Access...}
          callback {const char *fn = fl_file_chooser("Save GPIO access log", "", "");
if (fn) save_gpio(fn);}
          xywh {5 5 100 20}
        }
        MenuItem {} {
          label {Save Disassembly...}
          callback {const char *fn = fl_file_chooser("Save Disassembled Code", "*.asm", "");
if (fn) wAsmView->save_marked(fn);}
          xywh {5 5 100 20}
        }
        MenuItem {} {
          label {Save pseudo "C"...}
          callback {const char *fn = fl_file_chooser("Save pseudo \\"C\\" Code", "*.cpp", "");
if (fn) wAsmView->save_marked_cc(fn);}
          xywh {15 15 100 20}
        }
        MenuItem {} {
          label {Save Ticks...}
          callback {const char *fn = fl_file_chooser("Save Ticks", "*.txt", "");
if (fn) symbols->save_ticks(fn);}
          xywh {5 5 100 20} divider
        }
        MenuItem {} {
          label {Save pseudo "C" tree...}
          callback {const char *fn = fl_dir_chooser("Save pseudo \\"C\\" tree", "pseudo_c");
if (fn) desym(fn);}
          xywh {5 5 100 20}
        }
      }
      Submenu {} {
        label Help open
        xywh {0 0 100 20}
      } {
        MenuItem {} {
          label {About...}
          callback {fl_message("DyneE5\\n\\nA PDA Emulator.");}
          xywh {0 0 100 20}
        }
      }
    }
    Fl_Box wScreen {
      label screen
      xywh {5 28 330 512} box DOWN_BOX labelsize 12 align 17
      class Dn_Screen
    }
    Fl_Box wRegisterView {
      xywh {340 6 105 534} box DOWN_BOX
      class Dn_Register_View
    }
    Fl_Group {} {
      xywh {450 4 660 22}
    } {
      Fl_Button wStopRun {
        label {@>}
        callback {cpu->stop_run();}
        tooltip {continue/stop (c)} xywh {450 5 25 20} shortcut 0x63 color 50 labelsize 12 labelcolor 40
      }
      Fl_Button {} {
        label {@|>}
        callback {cpu->step_into();
update_gui();}
        tooltip {single step, step into (s)} xywh {480 5 25 20} shortcut 0x73 color 50 labelsize 12 labelcolor 40
      }
      Fl_Button {} {
        label {@redo}
        callback {cpu->step_over();
update_gui();}
        tooltip {next, step over (n)} xywh {510 5 25 20} shortcut 0x6e color 50 labelsize 12 labelcolor 40
      }
      Fl_Button {} {
        label {@redo}
        callback {cpu->step_over_no_sim();
update_gui();}
        tooltip {next, step over, don't trace (n)} xywh {540 5 25 20} shortcut 0x1006e color 50 labelsize 12 labelcolor 1
      }
      Fl_Input {} {
        label {pc:}
        callback {cpu->set_pc(o->value());
o->value("");}
        xywh {680 4 105 20} labelsize 12 when 8 textfont 4 textsize 12
      }
      Fl_Input {} {
        label {mem:}
        callback {wHexView->set_base(o->value());
o->value("");}
        xywh {825 4 101 20} labelsize 12 when 8 textfont 4 textsize 12
      }
      Fl_Button {} {
        label BP
        callback {cpu->toggle_breakpoint();
wAsmView->redraw();}
        tooltip {toggle breakpoint (b)} xywh {570 5 25 20} shortcut 0x62 color 50 labelsize 12
      }
      Fl_Button {} {
        label Tr
        callback {cpu->toggle_trace();
wAsmView->redraw();}
        tooltip {toggle trace (t)} xywh {600 5 25 20} shortcut 0x74 color 50 labelsize 12
      }
      Fl_Box {} {
        xywh {1100 4 10 22} resizable
      }
      Fl_Button {} {
        label {//}
        callback {add_edit_comment();} selected
        tooltip {add a comment (/)} xywh {630 4 25 20} shortcut 0x2f color 50 labelsize 12
      }
    }
    Fl_Tabs {} {open
      xywh {450 30 660 510} resizable
    } {
      Fl_Group {} {
        label DyneE5 open
        xywh {450 50 660 490} resizable
      } {
        Fl_Tile {} {open
          xywh {455 55 650 480} resizable
        } {
          Fl_Group {} {open
            xywh {455 55 650 70} box FLAT_BOX
          } {
            Fl_Box wHexView {
              xywh {455 55 650 65} box DOWN_BOX resizable
              class Dn_Hex_View
            }
          }
          Fl_Box wAsmView {
            xywh {455 125 650 410} box DOWN_BOX
            class Dn_Asm_View
          }
        }
      }
      Fl_Group {} {
        label Trace open
        xywh {450 50 660 490} hide
      } {
        Fl_Box wTracebackView {
          xywh {455 55 650 480} box DOWN_BOX resizable
          class Dn_Asm_View
        }
      }
    }
  }
} 

Function {update_gui()} {open
} {
  code {//wHexView->base(cpu->get_pc());
wAsmView->base(cpu->get_pc());
wMain->redraw();} {}
} 

Function {create_preferences_dialog()} {open
} {
  Fl_Window wPreferences {
    label {DyneE5 Preferences}
    callback {save_preferences();
o->hide();} open
    xywh {544 427 485 437} type Double modal visible
  } {
    Fl_Tabs {} {open
      xywh {5 5 475 390}
    } {
      Fl_Group {} {
        label Memory open
        xywh {5 25 475 370}
      } {
        Fl_Input wFilenameROM {
          label {ROM:}
          tooltip {Choose a ROM image file. This can be either a binary ROM dump or an ARM .aif file containing the ROM. DyneE5 supports MP2100 ROMs.} xywh {105 55 330 20} textsize 13
        }
        Fl_Button wFilechooserROM {
          label {@-1fileopen}
          callback {Fl_Input *wi = wFilenameROM;

const char *fn = fl_file_chooser("Please choose a ROM file", "", wi->value(), 1);
if (fn) {
  wi->value(fn);
  wi->do_callback();
}}
          xywh {435 55 25 20}
          code0 {o->labelcolor(3);}
        }
        Fl_Input wFilenameRAM {
          label {RAM:}
          tooltip {Choose an optional RAM image file. A valid RAM image will accelerate reboots.} xywh {105 80 330 20} textsize 13
        }
        Fl_Button wFilechooserRAM {
          label {@-1fileopen}
          callback {Fl_Input *wi = wFilenameRAM;

const char *fn = fl_file_chooser("Please choose a RAM file", "", wi->value(), 1);
if (fn) {
  wi->value(fn);
  wi->do_callback();
}}
          xywh {435 80 25 20}
          code0 {o->labelcolor(3);}
        }
        Fl_Input wFilenameFlash {
          label {Internal Flash:}
          tooltip {Choose an optional internal Flash RAM image file. Without a Flash file, DyneE5 will forget all settings and all installed software between restarts.} xywh {105 125 330 20} textsize 13
        }
        Fl_Button wFilechooserFlash {
          label {@-1fileopen}
          callback {Fl_Input *wi = wFilenameFlash;

const char *fn = fl_file_chooser("Please choose a Flash RAM file", "", wi->value(), 1);
if (fn) {
  wi->value(fn);
  wi->do_callback();
}}
          xywh {435 125 25 20}
          code0 {o->labelcolor(3);}
        }
        Fl_Input wFilenameSymbols {
          label {Symbols:}
          tooltip {Choose a file that contains symbolic information.} xywh {105 195 330 20} textsize 13
        }
        Fl_Button wFilechooserSymbols {
          label {@-1fileopen}
          callback {Fl_Input *wi = wFilenameSymbols;

const char *fn = fl_file_chooser("Please choose a symbols file", "", wi->value(), 1);
if (fn) {
  wi->value(fn);
  wi->do_callback();
}}
          xywh {435 195 25 20}
          code0 {o->labelcolor(3);}
        }
        Fl_Input wFilenameComments {
          label {Comments:}
          tooltip {Choose an optional file that may contain commentary and other symbolic information.} xywh {105 220 330 20} textsize 13
        }
        Fl_Button wFilechooserComments {
          label {@-1fileopen}
          callback {Fl_Input *wi = wFilenameComments;

const char *fn = fl_file_chooser("Please choose a comments file", "", wi->value(), 1);
if (fn) {
  wi->value(fn);
  wi->do_callback();
}}
          xywh {435 220 25 20}
          code0 {o->labelcolor(3);}
        }
        Fl_Input wFilenameBreakpoints {
          label {Breakpoints:}
          tooltip {Choose an optional file that may contain a list of breakpoints and watchpoints.} xywh {105 245 330 20} textsize 13
        }
        Fl_Button wFilechooserBreakpoints {
          label {@-1fileopen}
          callback {Fl_Input *wi = wFilenameBreakpoints;

const char *fn = fl_file_chooser("Please choose a breakpoints file", "", wi->value(), 1);
if (fn) {
  wi->value(fn);
  wi->do_callback();
}}
          xywh {435 245 25 20}
          code0 {o->labelcolor(3);}
        }
        Fl_Check_Button wSaveRAM {
          label {save on exit}
          xywh {105 100 165 20} down_box DOWN_BOX
        }
        Fl_Check_Button wSaveFlash {
          label {save on exit}
          xywh {105 145 165 20} down_box DOWN_BOX
        }
      }
      Fl_Group {} {
        label Logs open
        xywh {5 25 475 370} hide
      } {
        Fl_Input {} {
          label {Full Trace:}
          xywh {105 55 330 20} deactivate
        }
        Fl_Input {} {
          label {Call Trace:}
          xywh {105 80 330 20} deactivate
        }
        Fl_Input {} {
          label {Illegal Access:}
          xywh {105 105 330 20} deactivate
        }
        Fl_Input {} {
          label {Hit Count:}
          xywh {105 130 330 20} deactivate
        }
        Fl_Input {} {
          label {Pseudo "C":}
          xywh {105 185 330 20} deactivate
        }
        Fl_Input {} {
          label {Excerpts:}
          xywh {105 210 330 20} deactivate
        }
      }
    }
    Fl_Button {} {
      label Close
      callback {o->window()->do_callback();}
      xywh {395 405 80 20}
    }
  }
} 
